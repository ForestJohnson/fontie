import os
import shutil
import uuid
import io
import zipfile
import base64

from FontieException import FontieException
from FontieFont import FontieFont

PACKAGE_ROOT="/tmp"
PACKAGE_PREFIX="fontie_"
PACKAGE_NAME="fontie-package"

FONTSMOOTHIE="/opt/fontie/fontsmoothie/fontsmoothie.min.js"

FILE_CSS = """@font-face {
    font-family:'%s';
    src: %s;
    font-weight: %s;
    font-style: %s;
    font-stretch: %s;
    unicode-range: %s;
}"""

FILE_HTML = """<html>
<head>%s
    <style>
        /* INFO We recommend to use @import or the link tag to include the
                font-face definition into your page.
           NOTE Some browsers block access to CSS rules in external files if the
                page is not loaded via HTTP. Therefore the Font Smoothie script
                will not work if you open this page as a local file. */
        @import url('%s.css');

        /* INFO Just some other styles to beautify the page ;) */
        body {
            font-family: sans-serif;
            color: #999;
            white-space: nowrap;
        }
        h1 {
            font-size: 2rem;
            font-weight: normal;
            margin: 2rem 0 1rem 0;
        }
        h2 {
            font-size: 1.75rem;
            font-weight: normal;
            margin: 2rem 0 1rem 0;
        }
        h3 {
            font-size: 1.5rem;
            font-weight: normal;
            margin: 2rem 0 1rem 0;
        }
        p {
            margin: 2rem 0;
        }
        div p {
            font-family: '%s';
            font-weight: %s;
            font-style: %s;
            color: #000;
            margin: 1rem 0;
        }
    </style>
    <title>%s &mdash; Fontie webfont specimen</title>
</head>

<body>
    <h1>Fontie webfont specimen</h1>
    <h2>%s</h2>
    <div style="font-size:8px">
        <h3>Size 8px</h3>
        <p>the quick brown fox jumps over the lazy dog</p>
        <p>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</p>
        <p>1234567890-=!@#$%%^&amp;*()_+[]{}&lt;&gt;.,;:?/\|'"</p>
    </div>
    <div style="font-size:10px">
        <h3>Size 10px</h3>
        <p>the quick brown fox jumps over the lazy dog</p>
        <p>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</p>
        <p>1234567890-=!@#$%%^&amp;*()_+[]{}&lt;&gt;.,;:?/\|'"</p>
    </div>
    <div style="font-size:12px">
        <h3>Size 12px</h3>
        <p>the quick brown fox jumps over the lazy dog</p>
        <p>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</p>
        <p>1234567890-=!@#$%%^&amp;*()_+[]{}&lt;&gt;.,;:?/\|'"</p>
    </div>
    <div style="font-size:16px">
        <h3>Size 16px</h3>
        <p>the quick brown fox jumps over the lazy dog</p>
        <p>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</p>
        <p>1234567890-=!@#$%%^&amp;*()_+[]{}&lt;&gt;.,;:?/\|'"</p>
    </div>
    <div style="font-size:24px">
        <h3>Size 24px</h3>
        <p>the quick brown fox jumps over the lazy dog</p>
        <p>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</p>
        <p>1234567890-=!@#$%%^&amp;*()_+[]{}&lt;&gt;.,;:?/\|'"</p>
    </div>
    <p>Generated by Fontie &lt;<a href="http://fontie.pixelsvsbytes.com">http://fontie.pixelsvsbytes.com</a>&gt;</p>
</body>

</html>"""

MIMETYPES = {
    'woff': "application/font-woff",
    'woff2': "application/font-woff2",
    'eot': "application/vnd.ms-fontobject",
    'svg': "image/svg+xml",
    'ttf': "application/octet-stream",
    'otf': "application/octet-stream"
}

class FontiePackage:
    def __init__(self, id=None):
        self.output = {}
        if not id:
            self.create()
        else:
            self.open(id)

    def _generate_url(self, type, paths, options):
        if 'base64' in options:
            with open(paths[type], 'rb') as file:
                data = file.read()
            os.remove(paths[type])
            data = base64.b64encode(data).decode("utf-8")
            url = "data:%s;charset=utf-8;base64,%s" % (MIMETYPES[type], data)
        else:
            url = os.path.relpath(paths[type], self.path)
        return url

    def _generate_css(self, font, options):
        paths = self.output[font.font.fullname]
        src = []
        if 'local' in options:
            src.append("local('%s'), local(%s)" % (font.original['fontname'], font.original['fullname']))
        if 'eot' in paths:
            url = self._generate_url("eot", paths, options)
            src.append("url('%s?#iefix') format('embedded-opentype')" % url)
            src[0] = "url('%s');\n\tsrc: %s" % (url, src[0])
        if 'woff2' in paths:
            url = self._generate_url("woff2", paths, options)
            src.append("url('%s') format('woff2')" % url)
        if 'woff' in paths:
            url = self._generate_url("woff", paths, options)
            src.append("url('%s') format('woff')" % url)
        if 'ttf' in paths:
            url = self._generate_url("ttf", paths, options)
            src.append("url('%s') format('truetype')" % url)
        if 'otf' in paths:
            url = self._generate_url("otf", paths, options)
            src.append("url('%s') format('opentype')" % url)
        if 'svg' in paths:
            url = self._generate_url("svg", paths, options)
            src.append("url('%s#%s') format('svg')" % (url, font.font.fullname))
        src = ",\n\t\t".join(src)
        return FILE_CSS % (font.cssname, src, font.properties['weight'], font.properties['style'], font.properties['stretch'], font.properties['range'])

    def _generate_html(self, font, options):
        if 'fontsmoothie' in options:
            fontsmoothie = """
    <!-- INFO Just include the font-smoothie script anywhere on your page and
              you will have smooth fonts even on Windows XP. -->
    <script type="text/javascript" src="fontsmoothie.min.js" async></script>"""
        else:
            fontsmoothie = ""
        return FILE_HTML % (fontsmoothie, font.cssname, font.cssname, font.properties['weight'], font.properties['style'], font.font.familyname, font.font.fullname)

    def create(self):
        id = "%s%s" % (PACKAGE_PREFIX, uuid.uuid4())
        path = os.path.join(PACKAGE_ROOT, id, PACKAGE_NAME)
        if os.path.exists(path):
            raise FontieException(409, "package path already exists")
        os.makedirs(path)
        self.id = id
        self.path = path
        self.fonts = []

    # NOTE Open does not restore the previously opened fonts
    def open(self, id):
        path = os.path.join(PACKAGE_ROOT, id, PACKAGE_NAME)
        if not os.path.exists(path):
            raise FontieException(404, "package path does not exist")
        self.id = id
        self.path = path
        self.fonts = []

    def close(self, strict=True):
        while len(self.fonts):
            self.fonts[0].close(strict)
            del self.fonts[0]

    def destroy(self, strict=True):
        self.close(strict)
        if self.id:
            try:
                shutil.rmtree(os.path.join(PACKAGE_ROOT, self.id))
            except:
                if strict: raise
                traceback.print_exc()
        self.id = None
        self.path = None

    def add(self, font):
        self.fonts.append(FontieFont(id=font))

    def read(self):
        # TODO Add fonts in path
        pass

    def fix(self, options):
        for font in self.fonts:
            if "name" in options:
                font.fix_name()
            if "glyphs" in options:
                font.fix_glyphs()
            if "metrics" in options:
                font.fix_metrics()
            if "references" in options:
                font.fix_references()

    def hint(self, method):
        for font in self.fonts:
            font.hint(method)

    def subset(self, ranges):
        for font in self.fonts:
            font.subset(ranges)
            font.fix_lookups()

    def convert(self, options):
        for font in self.fonts:
            paths = {}
            if "ttf" in options:
                paths['ttf'] = os.path.join(self.path, "%s.ttf" % (font.font.fullname))
                font.export_ttf(paths['ttf'])
            if "otf" in options:
                paths['otf'] = os.path.join(self.path, "%s.otf" % (font.font.fullname))
                font.export_otf(paths['otf'])
            if "woff" in options:
                paths['woff'] = os.path.join(self.path, "%s.woff" % (font.font.fullname))
                font.export_woff(paths['woff'])
            if "woff2" in options:
                paths['woff2'] = os.path.join(self.path, "%s.woff2" % (font.font.fullname))
                font.export_woff2(paths['woff2'])
            if "eot" in options:
                paths['eot'] = os.path.join(self.path, "%s.eot" % (font.font.fullname))
                font.export_eot(paths['eot'])
            if "svg" in options:
                paths['svg'] = os.path.join(self.path, "%s.svg" % (font.font.fullname))
                font.export_svg(paths['svg'])
            self.output[font.font.fullname] = paths

    def css(self, options):
        header = "/* Generated by Fontie <http://fontie.pixelsvsbytes.com> */"
        css = {}
        for font in self.fonts:
            if "group" in options:
                font.cssname = font.font.familyname
            else:
                font.cssname = font.font.fullname
            if not font.cssname in css:
                css[font.cssname] = header
            css[font.cssname] = "%s\n\n%s" % (css[font.cssname], self._generate_css(font, options))
        for name, src in css.items():
            path = os.path.join(self.path, "%s.css" % name)
            with open(path, 'w') as file:
                file.write(src)

    def html(self, options):
        for font in self.fonts:
            html = self._generate_html(font, options)
            with open(os.path.join(self.path, '%s.html' % font.font.fullname), 'w') as file:
                file.write(html)
        if 'fontsmoothie' in options:
            shutil.copyfile(FONTSMOOTHIE, os.path.join(self.path, "fontsmoothie.min.js"))

    def zip(self):
        bytes = io.BytesIO()
        zip = zipfile.ZipFile(bytes, "w")
        for root, dirnames, filenames in os.walk(self.path):
            for filename in filenames:
                zip.write(os.path.join(root, filename), os.path.join(os.path.basename(self.path),filename))
        zip.close()
        return bytes
